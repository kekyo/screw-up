// screw-up - Easy package metadata inserter on Vite plugin
// Copyright (c) Kouji Matsui (@kekyo@mi.kekyo.net)
// Under MIT.
// https://github.com/kekyo/screw-up/

import type { Plugin } from 'vite';
import { readFile, writeFile, readdir, mkdir } from 'fs/promises';
import { join, dirname } from 'path';
import { PackageMetadata, resolvePackageMetadata } from './internal.js';

/**
 * Generate banner string from package.json metadata
 * @param metadata - Package metadata
 * @param outputKeys - Array of keys to output in specified order
 * @returns Banner string
 */
export const generateBanner = (metadata: PackageMetadata, outputKeys: string[]): string => {
  const parts: string[] = [];
  
  for (const key of outputKeys) {
    const value = metadata[key];
    if (value) {
      parts.push(`${key}: ${value}`);
    }
  }
  
  return parts.length > 0 ? `/*!\n * ${parts.join('\n * ')}\n */` : '';
};

/**
 * Insert banner header at appropriate position considering shebang
 * @param content - The content to insert banner into
 * @param banner - The banner header to insert
 * @returns Content with banner header inserted
 */
const insertBannerHeader = (content: string, banner: string): string => {
  const lines = content.split('\n');
  
  // Check if first line is shebang
  if (lines.length > 0 && lines[0].startsWith('#!')) {
    // Insert banner after shebang line
    return lines[0] + '\n' + banner + '\n' + lines.slice(1).join('\n');
  } else {
    // Insert banner at the beginning
    return banner + '\n' + content;
  }
};

/**
 * Convert string key to valid TypeScript identifier
 * @param key - The key to convert
 * @returns Valid TypeScript identifier
 */
const sanitizeKey = (key: string): string => {
  // Replace dots and other invalid characters with underscores
  return key.replace(/[^a-zA-Z0-9_]/g, '_').replace(/^(\d)/, '_$1');
};

/**
 * Generate TypeScript metadata file content from package metadata
 * @param metadata - Package metadata
 * @param outputKeys - Array of keys to output
 * @returns TypeScript file content
 */
const generateMetadataFile = (metadata: PackageMetadata, outputKeys: string[]): string => {
  const lines: string[] = [];
  
  lines.push('// This file is auto-generated by screw-up plugin');
  lines.push('// Do not edit manually');
  lines.push('');
  
  for (const key of outputKeys) {
    const value = metadata[key];
    if (value) {
      const sanitizedKey = sanitizeKey(key);
      const escapedValue = JSON.stringify(value);
      lines.push(`export const ${sanitizedKey} = ${escapedValue};`);
    }
  }
  
  lines.push('');
  
  return lines.join('\n');
};

/////////////////////////////////////////////////////////////////////////////////////////

/**
 * screw-up options
 */
export interface ScrewUpOptions {
  /**
   * Array of keys to output in banner in the specified order
   * @default ['name', 'version', 'description', 'author', 'license', 'repository.url']
   */
  outputKeys?: string[];
  /**
   * Array of asset file regex to add banner to
   * @default ['\.d\.ts$']
   */
  assetFilters?: string[];
  /**
   * Enable TypeScript metadata file generation
   * @default false
   */
  outputMetadataFile?: boolean;
  /**
   * Output path for TypeScript metadata file
   * @default 'src/generated/packageMetadata.ts'
   */
  outputMetadataFilePath?: string;
  /**
   * Array of keys to output in metadata file in the specified order
   * @default ['name', 'version', 'description', 'author', 'license', 'repository.url']
   */
  outputMetadataKeys?: string[];
}

/**
 * Vite plugin that adds banner to the bundled code
 * @param options - Plugin options
 * @returns Vite plugin
 */
const screwUp = (options: ScrewUpOptions = {}): Plugin => {
  const {
    outputKeys = ['name', 'version', 'description', 'author', 'license', 'repository.url'],
    assetFilters = ['\\.d\\.ts$'],
    outputMetadataFile = false,
    outputMetadataFilePath = 'src/generated/packageMetadata.ts',
    outputMetadataKeys = ['name', 'version', 'description', 'author', 'license', 'repository.url']} = options;

  const assetFiltersRegex = assetFilters.map(filter => new RegExp(filter));
  let banner: string;
  let metadata: any;
  let projectRoot: string;

  return {
    name: 'screw-up',
    apply: 'build',
    async configResolved(config) {
      projectRoot = config.root;
      metadata = await resolvePackageMetadata(config.root);
      banner = generateBanner(metadata, outputKeys);
    },
    async buildStart() {
      // Generate metadata TypeScript file
      if (outputMetadataFile) {
        const metadataContent = generateMetadataFile(metadata, outputMetadataKeys);
        const metadataPath = join(projectRoot, outputMetadataFilePath);
        
        try {
          // Ensure directory exists
          await mkdir(dirname(metadataPath), { recursive: true });
          // Write metadata file
          await writeFile(metadataPath, metadataContent);
        } catch (error) {
          console.warn(`Failed to write metadata file to ${metadataPath}:`, error);
        }
      }
    },
    generateBundle(_options, bundle) {
      // Add banner to each output file
      for (const fileName in bundle) {
        const chunk = bundle[fileName];
        if (chunk.type === 'chunk') {
          chunk.code = insertBannerHeader(chunk.code, banner);
        } else if (chunk.type === 'asset' && assetFiltersRegex.some(filter => filter.test(fileName))) {
          if (typeof chunk.source === 'string') {
            chunk.source = insertBannerHeader(chunk.source, banner + '\n');  // insert more blank line
          }
        }
      }
    },
    async writeBundle(options) {
      // Handle files written by other plugins (like vite-plugin-dts)
      if (!options.dir) return;

      try {
        // Read all files in the output directory
        const files = await readdir(options.dir, { recursive: true });

        // Iterate over all files
        for (const file of files) {
          const filePath = join(options.dir, file);

          // Check if the file is target asset file
          if (assetFiltersRegex.some(filter => filter.test(file))) {
            try {
              // Read the asset file
              const content = await readFile(filePath, 'utf-8');
              // Append banner to the asset file if it doesn't already contain it
              if (!content.includes(banner)) {
                await writeFile(filePath, insertBannerHeader(content, banner + '\n'));
              }
            } catch (error) {
              // Skip files that can't be read/written
            }
          }
        }
      } catch (error) {
        // Skip files that can't be read/written
      }
    }
  };
};

export default screwUp;
